// <auto-generated />
using System;
using CareTrack.Server.presistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CareTrack.Infrastructure.Migrations
{
    [DbContext(typeof(CareTrackDbContext))]
    [Migration("20240708183736_MedicineChanges")]
    partial class MedicineChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Admission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Discharge")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.PatientRecipe", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.HasKey("PatientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("PatientRecipes");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly[]>("DosingTime")
                        .IsRequired()
                        .HasColumnType("time without time zone[]");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.RecipeMedicine", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("RecipeMedicines");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.PatientRecipe", b =>
                {
                    b.HasOne("CareTrack.Infrastructure.Entities.Patient", "Patient")
                        .WithMany("PatientRecipes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareTrack.Infrastructure.Entities.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.RecipeMedicine", b =>
                {
                    b.HasOne("CareTrack.Infrastructure.Entities.Medicine", "Medicines")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareTrack.Infrastructure.Entities.Recipe", "Recipe")
                        .WithMany("RecipeMedicines")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicines");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.Patient", b =>
                {
                    b.Navigation("PatientRecipes");
                });

            modelBuilder.Entity("CareTrack.Infrastructure.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeMedicines");
                });
#pragma warning restore 612, 618
        }
    }
}
